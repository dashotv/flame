// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"time"

	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
)

func init() {
	initializers = append(initializers, setupDb)
	healthchecks["db"] = checkDb
}

func setupDb(app *Application) error {
	db, err := NewConnector(app)
	if err != nil {
		return err
	}

	app.DB = db
	return nil
}

func checkDb(app *Application) (err error) {
	// TODO: Check DB connection
	return nil
}

type Connector struct {
	Log    *zap.SugaredLogger
	Minion *grimoire.Store[*Minion]
}

func NewConnector(app *Application) (*Connector, error) {
	var s *Connection
	var err error

	s, err = app.Config.ConnectionFor("minion")
	if err != nil {
		return nil, err
	}
	minion, err := grimoire.New[*Minion](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	c := &Connector{
		Log:    app.Log.Named("db"),
		Minion: minion,
	}

	return c, nil
}

type Minion struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Queue    string           `bson:"queue,omitempty" json:"queue,omitempty"`
	Kind     string           `bson:"kind,omitempty" json:"kind,omitempty"`
	Args     string           `bson:"args,omitempty" json:"args,omitempty"`
	Status   string           `bson:"status,omitempty" json:"status,omitempty"`
	Attempts []*MinionAttempt `bson:"attempts,omitempty" json:"attempts,omitempty"`
}

type MinionAttempt struct { // struct
	StartedAt  time.Time `bson:"started_at,omitempty" json:"started_at,omitempty"`
	Duration   float64   `bson:"duration,omitempty" json:"duration,omitempty"`
	Status     string    `bson:"status,omitempty" json:"status,omitempty"`
	Error      string    `bson:"error,omitempty" json:"error,omitempty"`
	Stacktrace []string  `bson:"stacktrace,omitempty" json:"stacktrace,omitempty"`
}
