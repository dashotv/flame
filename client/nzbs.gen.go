// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
)

type NzbsService struct {
	client *Client
}

// NewNzbs makes a new client for accessing Nzbs services.
func NewNzbsService(client *Client) *NzbsService {
	return &NzbsService{
		client: client,
	}
}

func (s *NzbsService) Index(ctx context.Context) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/nzbs/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsAddRequest struct {
	URL      string `json:"url"`
	Category string `json:"category"`
	Name     string `json:"name"`
}

func (s *NzbsService) Add(ctx context.Context, req *NzbsAddRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("url", fmt.Sprintf("%v", req.URL)).
		SetQueryParam("category", fmt.Sprintf("%v", req.Category)).
		SetQueryParam("name", fmt.Sprintf("%v", req.Name)).
		Get("/nzbs/add")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsRemoveRequest struct {
	ID int `json:"id"`
}

func (s *NzbsService) Remove(ctx context.Context, req *NzbsRemoveRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("id", fmt.Sprintf("%v", req.ID)).
		Get("/nzbs/remove")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsDestroyRequest struct {
	ID int `json:"id"`
}

func (s *NzbsService) Destroy(ctx context.Context, req *NzbsDestroyRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("id", fmt.Sprintf("%v", req.ID)).
		Get("/nzbs/destroy")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsPauseRequest struct {
	ID int `json:"id"`
}

func (s *NzbsService) Pause(ctx context.Context, req *NzbsPauseRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("id", fmt.Sprintf("%v", req.ID)).
		Get("/nzbs/pause")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsResumeRequest struct {
	ID int `json:"id"`
}

func (s *NzbsService) Resume(ctx context.Context, req *NzbsResumeRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("id", fmt.Sprintf("%v", req.ID)).
		Get("/nzbs/resume")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsHistoryRequest struct {
	Hidden bool `json:"hidden"`
}

func (s *NzbsService) History(ctx context.Context, req *NzbsHistoryRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("hidden", fmt.Sprintf("%v", req.Hidden)).
		Get("/nzbs/history")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
