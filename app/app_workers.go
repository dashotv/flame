// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"context"

	"github.com/dashotv/minion"
	"github.com/pkg/errors"
)

func init() {
	initializers = append(initializers, setupWorkers)
	healthchecks["workers"] = checkWorkers
}

func checkWorkers(app *Application) error {
	// ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	// defer cancel()
	// return app.Workers.Ping(ctx)
	return nil
}

func setupWorkers(app *Application) error {
	ctx := context.Background()

	mcfg := &minion.Config{
		Logger:      app.Log.Named("minion"),
		Debug:       app.Config.MinionDebug,
		Concurrency: app.Config.MinionConcurrency,
		BufferSize:  app.Config.MinionBufferSize,
		DatabaseURI: app.Config.MinionURI,
		Database:    app.Config.MinionDatabase,
		Collection:  app.Config.MinionCollection,
	}

	m, err := minion.New(ctx, mcfg)
	if err != nil {
		return errors.Wrap(err, "creating minion")
	}

	// uncomment this to enable notifications
	// minion sends notifications as jobs are processed and change status
	// m.Subscribe(app.MinionNotification)

	if err := minion.Register[*Updates](m, &Updates{}); err != nil {
		return errors.Wrap(err, "registering worker: updates (Updates)")
	}
	if _, err := m.Schedule("* * * * * *", &Updates{}); err != nil {
		return errors.Wrap(err, "scheduling worker: updates (Updates)")
	}

	app.Workers = m
	return nil
}

// run the following commands to create the events channel and add the necessary models.
//
// > golem add event jobs event id job:*Minion
// > golem add model minion_attempt --struct started_at:time.Time duration:float64 status error 'stacktrace:[]string'
// > golem add model minion kind args status 'attempts:[]*MinionAttempt'

// // This allows you to notify other services as jobs change status.
//func (a *Application) MinionNotification(n *minion.Notification) {
//	if n.JobID == "-" {
//		return
//	}
//
//	j := &Minion{}
//	err := app.DB.Minion.Find(n.JobID, j)
//	if err != nil {
//		log.Errorf("finding job: %s", err)
//		return
//	}
//
//	if n.Event == "job:created" {
//		events.Send("flame.jobs", &EventJob{"created", j.ID.Hex(), j})
//		return
//	}
//	events.Send("flame.jobs", &EventJob{"updated", j.ID.Hex(), j})
//}
