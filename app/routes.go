// This file is autogenerated by Golem
// Do NOT make modifications, they will be lost
package app

import (
	"net/http"

	"github.com/dashotv/golem/web"
	"github.com/gin-gonic/gin"
)

func (s *Server) Routes() {
	s.Router.GET("/", homeHandler)

	nzbs := s.Router.Group("/nzbs")
	nzbs.GET("/add", nzbsAddHandler)
	nzbs.GET("/destroy", nzbsDestroyHandler)
	nzbs.GET("/history", nzbsHistoryHandler)
	nzbs.GET("/", nzbsIndexHandler)
	nzbs.GET("/pause", nzbsPauseHandler)
	nzbs.GET("/remove", nzbsRemoveHandler)
	nzbs.GET("/resume", nzbsResumeHandler)

	qbittorrents := s.Router.Group("/qbittorrents")
	qbittorrents.GET("/add", qbittorrentsAddHandler)
	qbittorrents.GET("/", qbittorrentsIndexHandler)
	qbittorrents.GET("/label", qbittorrentsLabelHandler)
	qbittorrents.GET("/pause", qbittorrentsPauseHandler)
	qbittorrents.GET("/remove", qbittorrentsRemoveHandler)
	qbittorrents.GET("/resume", qbittorrentsResumeHandler)
	qbittorrents.GET("/want", qbittorrentsWantHandler)
	qbittorrents.GET("/wanted", qbittorrentsWantedHandler)

}

func homeHandler(c *gin.Context) {
	Index(c)
}

func Index(c *gin.Context) {
	c.String(http.StatusOK, "home")
}

// /nzbs
func nzbsAddHandler(c *gin.Context) {
	url := web.QueryString(c, "url")
	category := web.QueryString(c, "category")
	name := web.QueryString(c, "name")

	NzbsAdd(c, url, category, name)
}

func nzbsDestroyHandler(c *gin.Context) {
	id := web.QueryInt(c, "id")

	NzbsDestroy(c, id)
}

func nzbsHistoryHandler(c *gin.Context) {
	hidden := web.QueryBool(c, "hidden")

	NzbsHistory(c, hidden)
}

func nzbsIndexHandler(c *gin.Context) {

	NzbsIndex(c)
}

func nzbsPauseHandler(c *gin.Context) {
	id := web.QueryInt(c, "id")

	NzbsPause(c, id)
}

func nzbsRemoveHandler(c *gin.Context) {
	id := web.QueryInt(c, "id")

	NzbsRemove(c, id)
}

func nzbsResumeHandler(c *gin.Context) {
	id := web.QueryInt(c, "id")

	NzbsResume(c, id)
}

// /qbittorrents
func qbittorrentsAddHandler(c *gin.Context) {
	url := web.QueryString(c, "url")

	QbittorrentsAdd(c, url)
}

func qbittorrentsIndexHandler(c *gin.Context) {

	QbittorrentsIndex(c)
}

func qbittorrentsLabelHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")
	label := web.QueryString(c, "label")

	QbittorrentsLabel(c, infohash, label)
}

func qbittorrentsPauseHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	QbittorrentsPause(c, infohash)
}

func qbittorrentsRemoveHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")
	del := web.QueryBool(c, "del")

	QbittorrentsRemove(c, infohash, del)
}

func qbittorrentsResumeHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	QbittorrentsResume(c, infohash)
}

func qbittorrentsWantHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")
	files := web.QueryString(c, "files")

	QbittorrentsWant(c, infohash, files)
}

func qbittorrentsWantedHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	QbittorrentsWanted(c, infohash)
}
