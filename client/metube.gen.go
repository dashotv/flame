// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
	"github.com/dashotv/flame/metube"
)

type MetubeService struct {
	client *Client
}

// NewMetube makes a new client for accessing Metube services.
func NewMetubeService(client *Client) *MetubeService {
	return &MetubeService{
		client: client,
	}
}

type MetubeIndexResponse struct {
	*Response
	Result *metube.HistoryResponse `json:"result"`
	Total  int64                   `json:"total"`
}

func (s *MetubeService) Index(ctx context.Context) (*MetubeIndexResponse, error) {
	result := &MetubeIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/metube/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type MetubeAddRequest struct {
	URL  string `json:"url"`
	Name string `json:"name"`
}

func (s *MetubeService) Add(ctx context.Context, req *MetubeAddRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("url", fmt.Sprintf("%v", req.URL)).
		SetQueryParam("name", fmt.Sprintf("%v", req.Name)).
		Get("/metube/add")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type MetubeRemoveRequest struct {
	Name  string `json:"name"`
	Where string `json:"where"`
}

func (s *MetubeService) Remove(ctx context.Context, req *MetubeRemoveRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("name", fmt.Sprintf("%v", req.Name)).
		SetQueryParam("where", fmt.Sprintf("%v", req.Where)).
		Get("/metube/remove")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
